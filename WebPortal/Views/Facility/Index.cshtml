@model FacilityIndexViewModel
@{
    ViewBag.Title = "Faciliteiten";
    Layout = "_Layout";
}
@if (ViewBag.message != null)
{
    <span class="text-red-600">@ViewBag.message</span>
}
<div class="flex justify-center align-middle">
    <div id="map" class="h-[80vh] w-[90vw]"></div>
</div>

@section Scripts
{
    <script>
        let map = L.map('map', {
            center: @Model.Resort.GetCoordinatesOfCenterPoint().ToString(),
            zoom: 16,
            attributionControl: false,
            minZoom: 16,
            maxBounds: @Html.Raw(Model.Resort.Coordinates)
        });
        L.tileLayer('@Html.Raw("https://api.mapbox.com/styles/v1/thieme/clu785gfh00y201qshhlscngq/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoidGhpZW1lIiwiYSI6ImNsdTF6bDI3YTByZGMya24wNzgxM3lnaW8ifQ.es_E8PCEaZhsaYiGsl8q5A")')
        .addTo(map);
        
        let markers = [];
        
        @foreach (var facility in Model.Facilities)
        {
            <text> 
            {
                let icon = L.divIcon({
                    html: `<i class="ti ti-@facility.Category.IconName text-2xl text-black"></i>`,
                    className: 'facility-icon',
                    iconSize: [35, 35],
                    iconAnchor: [15, 15],
                    popupAnchor: [-7, -10]
                });
                let markerLocation = L.latLng(@facility.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture), @facility.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture));
                let marker = L.marker(markerLocation, {
                    title: '@facility.Name',
                    icon: icon
                });
                let popupContent = `<b>@facility.Name</b><br />@facility.Description<br><a href="/facility/show/@facility.Id">Details</a><br><button onclick="deleteFacility(@facility.Id)">Verwijder</button>`;

                
                marker.addTo(map).bindPopup(popupContent);
                markers.push(marker);
              }
            </text>
        }
        
        // Add event listener for map clicking
        map.on('click', onMapClick);
        
        // Resize icons when zooming
        map.on('zoomend', function() {
            let zoomLevel = map.getZoom();
            let iconSize = calculateIconSize(zoomLevel);

            // Update icon size for all markers
            markers.forEach(marker => {
                let icon = marker.options.icon;
                icon.options.iconSize = iconSize;
                icon.options.iconAnchor = [iconSize[0] / 2, iconSize[1] / 2];
                icon.options.popupAnchor = [0, -iconSize[1] / 2];
                marker.setIcon(icon);
            });
        });
        
        
        function deleteFacility(facilityId) {
            if (confirm("Weet je zeker dat je deze faciliteit wilt verwijderen?")) {
                fetch('/facility/delete/' + facilityId, {
                    method: 'POST',
                })
                .then(response => {
                    if (response.ok) {
                        window.location.reload(); 
                    } else {
                        alert("Er is een fout opgetreden");
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        }
        
        
        function calculateIconSize(zoomLevel) {
            let maxZoom = 19;
            let minZoom = 10;
            let maxSize = 35;
            let minSize = 10;
        
            if (zoomLevel >= maxZoom) {
                return [maxSize, maxSize];
            } else if (zoomLevel <= minZoom) {
                return [minSize, minSize];
            } else {
                let size = minSize + ((maxSize - minSize) * Math.pow((zoomLevel - minZoom) / (maxZoom - minZoom), 4));
                return [size, size];
            }
        }

        
        function onMapClick(e) {
            window.location.href = '/Facility/create?latitude=' + encodeURIComponent(e.latlng.lat) + '&longitude=' + encodeURIComponent(e.latlng.lng);
        }
    </script>
}
