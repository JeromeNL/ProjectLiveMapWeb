@model List<DataAccess.Models.Facility>
@{
    ViewBag.Title = "Faciliteiten";
    Layout = "_Layout";
}

<div id="map" class="h-[80vh] w-[70vw]"></div>

@section Scripts
{
    <script>
        let map = L.map('map', {
            center: [51.342467730971386, 5.24916551341228],
            zoom: 18
        });
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        
        let markers = [];
        
        @foreach (var facility in Model)
        {
            <text> 
            {
                let icon = L.icon({
                    iconUrl: '@facility.IconUrl',
                    iconSize: [35, 35],
                    iconAnchor: [15, 15],
                    popupAnchor: [0, -15]
                });
                let markerLocation = L.latLng(@facility.Latitude.ToString(System.Globalization.CultureInfo.InvariantCulture), @facility.Longitude.ToString(System.Globalization.CultureInfo.InvariantCulture));
                let marker = L.marker(markerLocation, {
                    title: '@facility.Name',
                    icon: icon
                });
                let popupContent = '<b>@facility.Name</b><br />@facility.Description<br><a href="/facility/show/@facility.Id">Details</a>';
                marker.addTo(map).bindPopup(popupContent);
                markers.push(marker);
              }
            </text>
        }
        
        // Add event listener for map clicking
        map.on('click', onMapClick);
        
        // Resize icons when zooming
        map.on('zoomend', function() {
            let zoomLevel = map.getZoom();
            let iconSize = calculateIconSize(zoomLevel);
            console.log(iconSize)
        
            // Update icon size for all markers
            markers.forEach(marker => {
                let icon = marker.options.icon;
                icon.options.iconSize = iconSize;
                icon.options.iconAnchor = [iconSize[0] / 2, iconSize[1] / 2];
                icon.options.popupAnchor = [0, -iconSize[1] / 2];
                marker.setIcon(icon);
            });
        });
        
        function calculateIconSize(zoomLevel) {
            let maxZoom = 19;
            let minZoom = 10;
            let maxSize = 35;
            let minSize = 10;
        
            if (zoomLevel >= maxZoom) {
                return [maxSize, maxSize];
            } else if (zoomLevel <= minZoom) {
                return [minSize, minSize];
            } else {
                let size = minSize + ((maxSize - minSize) * Math.pow((zoomLevel - minZoom) / (maxZoom - minZoom), 4));
                return [size, size];
            }
        }

        
        function onMapClick(e) {
            let name = prompt("Enter title for the facility");
            let description = prompt("Enter description for the facility");
            let type = prompt("Enter type for the facility");
            let iconUrl = prompt("Enter icon URL for the facility");
            
            let facility = {
                Name: name,
                Description: description,
                Type: type, 
                Latitude: e.latlng.lat,
                Longitude: e.latlng.lng,
                IconUrl: iconUrl
            };
            
            console.log(JSON.stringify(facility));
            
            // Send a POST request to the server with the new marker
            fetch('/facility/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(facility)
            })
                .then(response => response.json())
                .then(data => {
                    console.log(data)
                    window.location.reload();
                })
                .catch(error => console.error('Error:', error));
        }
        
        
    </script>
}
